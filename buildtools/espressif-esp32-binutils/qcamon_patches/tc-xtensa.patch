+++ binutils-2.39/gas/config/tc-xtensa.c	2022-07-08 11:46:47.000000000 +0200
@@ -3489,6 +3489,42 @@
   return true;
 }
 
+/* D. Wegemer*/
+dump_buildinstr(BuildInstr *build_instr){
+    printf("InstrType: 0x%x\n", build_instr->typ);
+    printf("xtensa_opcode: %s (0x%x)\n", xtensa_opcode_name (xtensa_default_isa, build_instr->opcode), build_instr->opcode);
+    printf("BuildOp: \n");
+    printf("\top_num: %d\n", build_instr->ops->op_num);
+    printf("\ttype: %d\n", build_instr->ops->typ);
+    printf("\tdata: 0x%x\n", build_instr->ops->op_data);
+    printf("\tnext: 0x%x\n", build_instr->ops->next);
+    printf("BuildInstr next: 0x%x\n", build_instr->next);
+}
+
+/* D. Wegemer*/
+dump_tinsn(TInsn *ins) {
+    printf("insn_type: %d\n", ins->insn_type);
+    printf("xtensa_opcode: %s (0x%x)\n", xtensa_opcode_name (xtensa_default_isa, ins->opcode), ins->opcode);
+    printf("is specific opcode? %d, keep_wide? %d, loc_directive_seen? %d\n", ins->is_specific_opcode, ins->keep_wide, ins->loc_directive_seen);
+    printf("debug line: column: %d, discr: %d filenum: %d, flags: %d\n", ins->debug_line.column, ins->debug_line.discriminator, ins->debug_line.filenum, ins->debug_line.flags);
+    printf("ntok: %d\n", ins->ntok);
+    printf("ExpressionS: \n");
+    int num_ops = xtensa_opcode_num_operands (xtensa_default_isa, ins->opcode);
+    for(int i=0; i< ins->ntok && i < num_ops; i++) {
+        printf("\tadd Symbol (pointer): %x\n", ins->tok[i].X_add_symbol);
+        printf("\top Symbol (pointer): %x\n", ins->tok[i].X_op_symbol);
+        printf("\tadd number: 0x%x\n", ins->tok[i].X_add_number);
+        printf("\top: 0x%x\n", ins->tok[i].X_op);
+        printf("\tunsigned: 0x%x\n", ins->tok[i].X_unsigned);
+        printf("\textrabit: 0x%x\n", ins->tok[i].X_extrabit);
+        printf("\tmd: 0x%x\n", ins->tok[i].X_md);
+    }
+    printf("sub_type: %d\n", ins->subtype);
+    printf("literal space: %d\n", ins->literal_space);
+    printf("symbol: 0x%x\n", ins->symbol);
+    printf("offset: %d\n", ins->offset);
+    printf("literal_frag: 0x%x\n", ins->literal_frag);
+}
 
 /* Return TRUE on success.  */
 
@@ -3501,6 +3537,11 @@
   tinsn_init (targ);
   targ->debug_line = insn->debug_line;
   targ->loc_directive_seen = insn->loc_directive_seen;
+
+    printf("############ xg_build_to_insn() insn->opcode: %s, bi->opcode: %s\n", xtensa_opcode_name (xtensa_default_isa, insn->opcode), xtensa_opcode_name (xtensa_default_isa, bi->opcode));
+    //printf("############ Copy from this \"BUILDINSTR\": ###############\n");
+    //dump_buildinstr(bi);
+
   switch (bi->typ)
     {
     case INSTR_INSTR:
@@ -3652,18 +3693,85 @@
   return true;
 }
 
+/* D. Wegemer*/
+build_wsr_litbase_insn(TInsn *ins) {
+    ins->insn_type = 0;
+    ins->opcode = 0xbc;
+    ins->is_specific_opcode = 0;
+    ins->keep_wide = 0;
+    ins->ntok = 1;
+    //memset (tok, 0, sizeof (*tok) * ins->ntok);
+    ins->tok[0].X_add_symbol = NULL;
+    ins->tok[0].X_op_symbol = NULL;
+    ins->tok[0].X_add_number = 0xf;
+    ins->tok[0].X_op = 2;
+    //ins->tok[0] = *tok;
+    ins->subtype = 0;
+    ins->literal_space = 0;
+    ins->symbol = NULL;
+    ins->offset = 0;
+    ins->literal_frag = NULL;
+}
 
 /* Return TRUE on success.  */
 
 static bool
-xg_build_to_stack (IStack *istack, TInsn *insn, BuildInstr *bi)
+xg_build_to_stack (IStack *istack, TInsn *insn, BuildInstr *bi, int is_last_frag)
 {
+    BuildInstr *prev_bi = NULL;
+
   for (; bi != NULL; bi = bi->next)
     {
+        //printf("############# xg_build_to_stack(): bi: \n");
+        //dump_buildinstr(bi);
+
+        /* D. Wegemer: IF CURRENT OPCODE is callx8 && PREV OPCODE is ldr32*/
+        /* opcode MOVI: 0x8b*/
+        
+        
+        // && istack->is_last_segment == 1
+        if(bi->opcode == 0x3a && prev_bi->opcode == 0x86 && is_last_frag)  {
+            printf("--------------------- xg_build_to_stack() adding WSR LITBASE before CALL!!! last fragment?: %d\n", is_last_frag);
+            BuildInstr *new_bi;
+            new_bi = (BuildInstr *) malloc(sizeof(BuildInstr));
+            new_bi->opcode = 0xbc;
+            new_bi->typ = 0;
+            new_bi->ops = (BuildOp *) malloc(sizeof(BuildOp));
+            new_bi->ops->next = NULL;
+            new_bi->ops->op_data = 0xf;
+            new_bi->ops->typ = 0;
+            new_bi->ops->op_num = 0;
+
+            TInsn *new_ins = istack_push_space (istack);
+            if (!xg_build_to_insn (new_ins, insn, new_bi)) {
+                printf("############# xg_build_to_stack(): error during xg_build_to_insn()!\n");
+                return false;
+            }
+
+            //printf("--------------------- g_build_to_stack() dump next_insn:\n");
+            //dump_tinsn(new_ins);
+        }        
+
+       /*
+       if(bi->opcode == 0x3a && prev_bi->opcode == 0x86 && bi->next == NULL) {
+            printf("--------------------- xg_build_to_stack() adding WSR LITBASE before CALL!!! last segment?: %d\n", istack->is_last_segment);
+            if(istack->is_last_segment == 1) {
+                TInsn *new_ins = (TInsn *) malloc(sizeof(TInsn));
+                tinsn_init (new_ins);
+                build_wsr_litbase_insn(new_ins);
+                //new_ins->debug_line = insn->debug_line;
+                //new_ins->loc_directive_seen = insn->loc_directive_seen;
+                istack_push(istack, new_ins);
+            }
+        }
+        */
+
       TInsn *next_insn = istack_push_space (istack);
 
       if (!xg_build_to_insn (next_insn, insn, bi))
 	return false;
+
+        prev_bi = bi;
     }
   return true;
 }
@@ -3672,7 +3780,7 @@
 /* Return TRUE on valid expansion.  */
 
 static bool
-xg_expand_to_stack (IStack *istack, TInsn *insn, int lateral_steps)
+xg_expand_to_stack (IStack *istack, TInsn *insn, int lateral_steps, int is_last_frag)
 {
   int stack_size = istack->ninsn;
   int steps_taken = 0;
@@ -3682,6 +3790,9 @@
   gas_assert (insn->insn_type == ITYPE_INSN);
   gas_assert (insn->opcode < table->num_opcodes);
 
+    /*D. Wegemer*/
+    xtensa_opcode prev_op = NULL;
+
   for (l = table->table[insn->opcode]; l != NULL; l = l->next)
     {
       TransitionRule *rule = l->rule;
@@ -3693,7 +3804,7 @@
 	      int i;
 
 	      /* This is it.  Expand the rule to the stack.  */
-	      if (!xg_build_to_stack (istack, insn, rule->to_instr))
+                if (!xg_build_to_stack (istack, insn, rule->to_instr, is_last_frag))
 		return false;
 
 	      /* Check to see if it fits.  */
@@ -3713,6 +3824,9 @@
 	    }
 	  steps_taken++;
 	}
+
+        /*D. Wegemer*/
+        prev_op = rule->opcode;
     }
   return false;
 }
@@ -3766,6 +3880,11 @@
   TInsn current_insn;
   int lateral_steps = 0;
   int istack_size = istack->ninsn;
+     /* D. Wegemer*/
+    fragS *my_fragp;
+    int first_fragp_opcode = 0;
+    int last_fragp_opcode = 0;
+    int is_last_frag = 0;
 
   if (xg_symbolic_immeds_fit (insn, pc_seg, pc_frag, pc_offset, stretch)
       && steps_taken >= min_steps)
@@ -3775,6 +3894,8 @@
     }
   current_insn = *insn;
 
+    printf("###### xg_assembly_relax() current_insn opcode: %s\n", xtensa_opcode_name (xtensa_default_isa, current_insn.opcode));
+
   /* Walk through all of the single instruction expansions.  */
   while (xg_is_single_relaxable_insn (&current_insn, &single_target, false))
     {
@@ -3784,6 +3905,8 @@
 	{
 	  if (steps_taken >= min_steps)
 	    {
+                printf("###### xg_assembly_relax() ------------ do we get here? SINGLE ---------------\n");
+                
 	      istack_push (istack, &single_target);
 	      return steps_taken;
 	    }
@@ -3791,6 +3914,36 @@
       current_insn = single_target;
     }
 
+    /* D. Wegemer*/
+    vliw_insn vinsn;
+    // current fragp opcode:
+    if(pc_frag->fr_opcode != NULL) {
+        vinsn_from_chars (&vinsn, pc_frag->fr_opcode);
+        tinsn_immed_from_frag (&vinsn.slots[0], pc_frag, 0);
+        first_fragp_opcode = vinsn.slots[0].opcode;
+        printf("###### xg_assembly_relax(): first! fragP 0x%x fragp opcode: %s (0x%x)\n", pc_frag, xtensa_opcode_name (xtensa_default_isa, vinsn.slots[0].opcode), vinsn.slots[0].opcode);
+    }
+
+    // last fragp opcode:
+    int more_then_one = 0;
+    for(my_fragp = pc_frag->fr_next; my_fragp; my_fragp = my_fragp->fr_next) {
+        if(my_fragp->fr_opcode != NULL) {
+            vinsn_from_chars (&vinsn, my_fragp->fr_opcode);
+            tinsn_immed_from_frag (&vinsn.slots[0], my_fragp, 0);
+            more_then_one++;
+            printf("###### xg_assembly_relax(): \tfragP 0x%x fragp opcode: %s (0x%x)\n", my_fragp, xtensa_opcode_name (xtensa_default_isa, vinsn.slots[0].opcode), vinsn.slots[0].opcode);
+        }
+    }
+
+    printf("###### xg_assembly_relax(): last! fragP 0x%x fragp opcode: %s (0x%x)\n", my_fragp, xtensa_opcode_name (xtensa_default_isa, vinsn.slots[0].opcode), vinsn.slots[0].opcode);
+    last_fragp_opcode = vinsn.slots[0].opcode;
+    if(first_fragp_opcode == 0x37 && last_fragp_opcode == 0x40 && more_then_one == 1) {
+        printf("###### xg_assembly_relax(): found very last!!!\n");
+        is_last_frag = 1;
+    }
+
+
+
   /* Now check for a multi-instruction expansion.  */
   while (xg_is_relaxable_insn (&current_insn, lateral_steps))
     {
@@ -3799,13 +3952,18 @@
 	{
 	  if (steps_taken >= min_steps)
 	    {
+                printf("###### xg_assembly_relax() ------------ do we get here? MULTI 1 ---------------\n");
+
 	      istack_push (istack, &current_insn);
 	      return steps_taken;
 	    }
 	}
       steps_taken++;
-      if (xg_expand_to_stack (istack, &current_insn, lateral_steps))
+        if (xg_expand_to_stack (istack, &current_insn, lateral_steps, is_last_frag))
 	{
+            /*D.Wegemer*/
+            printf("###### xg_assembly_relax() ------------ valid expansion! MULTI 2 ---------------\n");
+            
 	  if (steps_taken >= min_steps)
 	    return steps_taken;
 	}
@@ -4136,10 +4294,12 @@
   else if (xg_immeds_fit (orig_insn))
     do_expand = false;
 
-  if (do_expand)
+    if (do_expand) {
+        printf("calling xg_assembly_relax() from xg_expand_assembly_insn()\n");
     xg_assembly_relax (istack, orig_insn, 0, 0, 0, 0, 0);
-  else
+    } else {
     istack_push (istack, orig_insn);
+    }
 
   return false;
 }
@@ -4361,7 +4521,7 @@
 
   if (opnum != get_relaxable_immed (opcode))
     {
-      as_bad (_("invalid relocation for operand %i of '%s'"),
+        as_bad (_("1 invalid relocation for operand %i of '%s'"),
 	      opnum + 1, xtensa_opcode_name (xtensa_default_isa, opcode));
       return false;
     }
@@ -5861,7 +6021,7 @@
     {
       as_bad_where (fixP->fx_file,
 		    fixP->fx_line,
-		    _("invalid relocation for operand %d of '%s'"),
+                _("2 invalid relocation for operand %d of '%s'"),
 		    opnum, xtensa_opcode_name (isa, opcode));
       return 0;
     }
@@ -6422,9 +6582,7 @@
       as_bad (_("couldn't find a valid instruction format"));
       fprintf (stderr, _("    ops were: "));
       for (i = 0; i < vinsn->num_slots; i++)
-	fprintf (stderr, _(" %s;"),
-		 xtensa_opcode_name (xtensa_default_isa,
-				     vinsn->slots[i].opcode));
+            fprintf (stderr, _(" %s;"), xtensa_opcode_name (xtensa_default_isa, vinsn->slots[i].opcode));
       fprintf (stderr, _("\n"));
       xg_clear_vinsn (vinsn);
       return;
@@ -7386,6 +7544,7 @@
 void
 xtensa_end (void)
 {
+    printf("!!! xtensa_end() \n");
   directive_balance ();
   xtensa_flush_pending_output ();
 
@@ -9576,6 +9735,8 @@
 
   fragP->tc_frag_data.unreported_expansion = 0;
 
+    printf("# xtensa_relax_frag() start\n");
+
   switch (fragP->fr_subtype)
     {
     case RELAX_ALIGN_NEXT_OPCODE:
@@ -10302,6 +10463,8 @@
   tinsn = cur_vinsn.slots[slot];
   tinsn_immed_from_frag (&tinsn, fragP, slot);
 
+    printf("### relax_frag_immed() cur_vinsn slot: %d, max slots: %d\n", slot, cur_vinsn.num_slots);
+
   if (estimate_only && xtensa_opcode_is_loop (isa, tinsn.opcode) == 1)
     return 0;
 
@@ -10491,6 +10654,8 @@
   file_name = as_where (&line);
   new_logical_line (fragp->fr_file, fragp->fr_line);
 
+    printf("### md_convert_frag() start\n");
+    
   switch (fragp->fr_subtype)
     {
     case RELAX_ALIGN_NEXT_OPCODE:
@@ -10705,7 +10870,6 @@
   frag_wane (fragP);
 }
 
-
 static fixS *fix_new_exp_in_seg
   (segT, subsegT, fragS *, int, int, expressionS *, int,
    bfd_reloc_code_real_type);
@@ -10727,6 +10891,9 @@
   int bytes;
   bool is_loop;
 
+    /* D. Wegemer*/
+    printf("#### convert_frag_immed() fragP->fr_opcode: 0x%x, fragP->next: 0x%x\n", fragP->fr_opcode, fragP->fr_next);
+
   gas_assert (fr_opcode != NULL);
 
   xg_clear_vinsn (&cur_vinsn);
@@ -10800,6 +10967,8 @@
 	  TInsn *tinsn = &istack.insn[i];
 	  fragS *lit_frag;
 
+            printf("#### convert_frag_immed() tinsn opcode: %s\n", xtensa_opcode_name (xtensa_default_isa, tinsn->opcode));
+
 	  switch (tinsn->insn_type)
 	    {
 	    case ITYPE_LITERAL:
@@ -10923,7 +11092,9 @@
 	    }
 	}
 
+        /*D. Wegemer Diff here!?*/
       diff = total_size - old_size;
+        printf("#### convert_frag_immed() diff: %d\n", diff);
       gas_assert (diff >= 0);
       if (diff != 0)
 	expanded = true;
